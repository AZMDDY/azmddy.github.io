(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{391:function(t,e,a){"use strict";a.r(e);var s=a(4),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"gtest-day-1-基础使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gtest-day-1-基础使用"}},[t._v("#")]),t._v(" GTest Day 1 —— 基础使用")]),t._v(" "),e("blockquote",[e("p",[t._v("GoogleTest 是 Google 的 C++ 测试和模拟框架。")])]),t._v(" "),e("h2",{attrs:{id:"初步使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初步使用"}},[t._v("#")]),t._v(" 初步使用")]),t._v(" "),e("p",[t._v("下载构建好 GTest 之后，我们就可以开始在自己的项目中使用 GTest 了,首先我们需要在自己的工程中包含"),e("code",[t._v('#include"gtest/gtest.h"')]),t._v("，于此同时，我们在项目构建中需要链接 gtest 和 gtest_main 库以及头文件。pthread 库也应该包含到你的工程中，gtest 依赖于 pthread,这样我们就可以开始使用 GTest 了。")]),t._v(" "),e("p",[t._v("首先是初始化 GTest;")]),t._v(" "),e("div",{staticClass:"language-cpp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[e("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),e("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("<gtest/gtest.h>")])]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    testing"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("InitGoogleTest")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("argc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" argv"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    std"),e("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("RUN_ALL_TESTS")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[e("code",[t._v("testing::InitGoogleTest(&argc, argv);")]),t._v("：初始化 GoogleTest;")]),t._v(" "),e("p",[t._v("执行"),e("code",[t._v("RUN_ALL_TESTS()")]),t._v("将会运行你定义了的测试;")]),t._v(" "),e("h2",{attrs:{id:"基本的概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本的概念"}},[t._v("#")]),t._v(" 基本的概念")]),t._v(" "),e("p",[t._v("当使用 GTest 的时候，你去写一些断言来测试情况是否正确，断言的会产生三种结果："),e("code",[t._v("success")]),t._v(","),e("code",[t._v("nonfatal failure")]),t._v("和 "),e("code",[t._v("fatal failure")]),t._v(",当发生了一个（fatal failure）致命错误的时候，它会终止当前的程序，其他情况下，程序仍会正常运行。")]),t._v(" "),e("h2",{attrs:{id:"断言-assertions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断言-assertions"}},[t._v("#")]),t._v(" 断言（Assertions）")]),t._v(" "),e("p",[t._v("GTest 的断言是像函数调用一样的宏，当断言失败了，GTest 在终端打印出断言所在源文件以及所在行数，并且会输出失败信息，你也可以提供一个自定义的错误信息，这个错误信息将在 GTest 产生的错误信息后面打印出来;")]),t._v(" "),e("h3",{attrs:{id:"断言的前缀"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断言的前缀"}},[t._v("#")]),t._v(" 断言的前缀")]),t._v(" "),e("p",[t._v("GTest 有两种类型的断言，它们的区别在于前缀，一种是"),e("code",[t._v("ASSERT_*")]),t._v("。另一种是"),e("code",[t._v("EXPECT_*")]),t._v(";")]),t._v(" "),e("p",[e("code",[t._v("ASSERT_")]),t._v("前缀的断言产生的错误将是"),e("code",[t._v("fatal failure")]),t._v("，这个将会中断程序的执行，对于很大威胁的调试而言，使用这个类型的断言是很明智的，但是这个断言有可能导致程序申请的资源没有被释放，造成内存泄露。")]),t._v(" "),e("p",[e("code",[t._v("EXPECT_")]),t._v("前缀的断言产生的错误是"),e("code",[t._v("non failure")]),t._v("，它并不会中断程序的执行，通常情况下可使用"),e("code",[t._v("EXPECT_*")]),t._v("是更好一点的，它能够一次性报告多个错误;")]),t._v(" "),e("h3",{attrs:{id:"自定义错误信息的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义错误信息的"}},[t._v("#")]),t._v(" 自定义错误信息的")]),t._v(" "),e("p",[t._v("我们可以通过"),e("code",[t._v("<<")]),t._v("操作符将自定义的错误信息添加到宏中;")]),t._v(" "),e("div",{staticClass:"language-cpp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-cpp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ASSERT_EQ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1 and 2 are unequal"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("对于任何能够作为输出流的内容都能够作为自定义的错误信息，对于"),e("code",[t._v("UNICODE")]),t._v("编码的内容将会被转化成"),e("code",[t._v("UTF-8")]),t._v(";")]),t._v(" "),e("h3",{attrs:{id:"基础的断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础的断言"}},[t._v("#")]),t._v(" 基础的断言")]),t._v(" "),e("p",[t._v("这些断言仅仅是测试条件是"),e("code",[t._v("true/false")]),t._v(";")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Fatal assertion")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Nonfatal assertion")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Verifies")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_TRUE(condition);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_TRUE(condition);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("condition")]),t._v(" is true")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_FALSE(condition);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_FALSE(condition);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("condition")]),t._v(" is false")])])])]),t._v(" "),e("h3",{attrs:{id:"两项比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两项比较"}},[t._v("#")]),t._v(" 两项比较")]),t._v(" "),e("p",[t._v("这个是用来比较两项内容的值的断言;")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Fatal assertion")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Nonfatal assertion")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Verifies")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_EQ(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_EQ(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("val1 == val2")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_NE(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_NE(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("val1 != val2")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_LT(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_LT(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("val1 < val2")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_LE(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_LE(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("val1 <= val2")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_GT(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_GT(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("val1 > val2")])])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_GE(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_GE(val1, val2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("val1 >= val2")])])])])]),t._v(" "),e("p",[t._v("用于比较的两个值必须是同一种，否则会产生编译错误;")]),t._v(" "),e("h3",{attrs:{id:"字符串比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串比较"}},[t._v("#")]),t._v(" 字符串比较")]),t._v(" "),e("p",[t._v("The assertions in this group compare two "),e("strong",[t._v("C strings")]),t._v(". If you want to compare\ntwo "),e("code",[t._v("string")]),t._v(" objects, use "),e("code",[t._v("EXPECT_EQ")]),t._v(", "),e("code",[t._v("EXPECT_NE")]),t._v(", and etc instead.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Fatal assertion")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Nonfatal assertio")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Verifies")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_STREQ(str1, str2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_STREQ(str1, str2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("the two C strings have the same content")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_STRNE(str1, str2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_STRNE(str1, str2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("the two C strings have different contents")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_STRCASEEQ(str1, str2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_STRCASEEQ(str1, str2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("the two C strings have the same content, ignoring case")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("ASSERT_STRCASENE(str1, str2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("code",[t._v("EXPECT_STRCASENE(str1, str2);")])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("the two C strings have different contents, ignoring case")])])])]),t._v(" "),e("p",[t._v("C 风格的字符串适合使用以上断言，而对于 String 风格的字符串，"),e("code",[t._v("ASSERT_EQ")]),t._v("和"),e("code",[t._v("EXPECT_EQ")]),t._v("之类的都是可以用的。")])])}),[],!1,null,null,null);e.default=n.exports}}]);
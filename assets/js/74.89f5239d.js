(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{397:function(s,a,t){"use strict";t.r(a);var e=t(4),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"perf-linux下的性能分析工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#perf-linux下的性能分析工具"}},[s._v("#")]),s._v(" perf —— Linux下的性能分析工具")]),s._v(" "),a("blockquote",[a("p",[s._v("在对性能有明显要求的产品开发中经常需要使用到perf来分析热点函数，找出性能瓶颈，并做出性能优化。在产品迭代过程中，通常也会使用它来分析两个版本之间的性能差异，分析当前版本相对于上个版本是否出现明显的性能下降。")])]),s._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),a("h3",{attrs:{id:"方法一-直接安装软件包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法一-直接安装软件包"}},[s._v("#")]),s._v(" 方法一 —— 直接安装软件包")]),s._v(" "),a("p",[a("code",[s._v("perf")]),s._v("工具位于"),a("code",[s._v("linux-tools-common")]),s._v("包中。我们可以直接安装，安装完成后，执行"),a("code",[s._v("perf")]),s._v("命令可能会提示还需要安装其他的软件包，按照提示安装即可。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" linux-tools-common\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" linux-tools-5.4.0-107-generic linux-cloud-tools-5.4.0-107-generic\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AZMDDY/imgs/img/image-20220511175432024.png",alt:"image-20220511175432024"}})]),s._v(" "),a("h2",{attrs:{id:"方法二-源码编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法二-源码编译"}},[s._v("#")]),s._v(" 方法二 —— 源码编译")]),s._v(" "),a("p",[s._v("其实生产环境中这种方式更为常用，在生产环境上系统都是精简过的，perf等工具都是不必要的，只有在开发的时候才需要使用perf工具，面对生产环境没有现成perf工具，也不能联网安装，只能将编译好的perf拷贝到环境上，或者在环境上离线安装配套的perf。")]),s._v(" "),a("p",[s._v("需要根据内核版本和Linux的发行版本来获取源码，然后从源码构建perf。")]),s._v(" "),a("ul",[a("li",[s._v("获取源码\n"),a("ul",[a("li",[s._v("源码获取地址：https://kernel.org/")]),s._v(" "),a("li",[s._v("内核版本：执行命令："),a("code",[s._v("cat /proc/version")])])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AZMDDY/imgs/img/image-20220511180900091.png",alt:"image-20220511180900091"}})]),s._v(" "),a("ul",[a("li",[s._v("我们可以去下载对应版本的内核源码：https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/snapshot/linux-5.4.107.tar.gz")]),s._v(" "),a("li",[s._v("解压后，"),a("code",[s._v("cd tools/perf")])]),s._v(" "),a("li",[s._v("执行"),a("code",[s._v("make")]),s._v(",如果提示错误，就按照提示去解决它们。"),a("code",[s._v("sudo apt-get install flex bison")]),s._v("，安装好提示缺少的包后，就编译成功了。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AZMDDY/imgs/img/image-20220511182516686.png",alt:"image-20220511182516686"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AZMDDY/imgs/img/image-20220511182625189.png",alt:"image-20220511182625189"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AZMDDY/imgs/img/image-20220511182709379.png",alt:"image-20220511182709379"}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("其实这个编译后也不是很好用，因为这个是链接的动态库，如果你想将编译好的perf二进制文件copy到其他环境上使用就需要将这些依赖的动态库都copy过去，所以我们可以修改一下编译选项，静态编译一下，然后就只用拷贝一个perf二进制文件就好了。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" tools/perf\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" Makefile.perf\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义 LDFLAGS=-static")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" clean\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AZMDDY/imgs/img/image-20220511184131518.png",alt:"image-20220511184131518"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/AZMDDY/imgs/img/image-20220511184200103.png",alt:"image-20220511184200103"}})])])]),s._v(" "),a("h2",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[s._v("#")]),s._v(" 使用")]),s._v(" "),a("p",[s._v("由于生产环境上运行的程序都是编译的时候strip过，我们不能直接去使用perf，如果直接使用，生成的火焰图就没有函数信息，不知道热点函数是谁，我们应该编译出带有调试信息的进程，也就是"),a("code",[s._v("not stripped")]),s._v("的进程。")]),s._v(" "),a("p",[s._v("在准备好perf和"),a("code",[s._v("not stripped")]),s._v("的进程后，执行以下命令抓取热点：")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 获取正在运行的进程的pid")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-ef")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 采样")]),s._v("\nperf record "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-g")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-a")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-F")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),s._v(" -- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4567")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-o")]),s._v(" perf.data\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -g 输出函数调用栈")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -F 设置采样频率HZ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -a 记录所有CPU的事件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -- sleep 设置采样时间（s）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -p 设置记录的进程pid")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -o 记录结果输出到指定文件")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将报告输出成可读的文件")]),s._v("\nperf script "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-i")]),s._v(" perf.data "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" out.perf\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("我们还需要借助"),a("code",[s._v("FlameGraph")]),s._v("工具来生成火焰图。")]),s._v(" "),a("p",[s._v("下载地址：https://github.com/brendangregg/FlameGraph.git")]),s._v(" "),a("p",[s._v("这个直接下载就可以使用。")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将生成的out.perf文件拷贝到FlameGraph项目中。")]),s._v("\n./stackcollapse-perf.pl out.perf "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" out.folded\n./flamegraph.pl out.floded "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" out.svg\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("然后我们就可以使用浏览器打开"),a("code",[s._v("out.svg")]),s._v("火焰图了。")]),s._v(" "),a("p",[s._v("火焰图的横向是函数执行时间，竖向是函数调用栈。通过这个我们可以看到在哪个调用栈的哪个函数消耗了太多cpu资源，找到这个优化点，提高性能。")]),s._v(" "),a("h3",{attrs:{id:"火焰图对比-红蓝差分火焰图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#火焰图对比-红蓝差分火焰图"}},[s._v("#")]),s._v(" 火焰图对比（红蓝差分火焰图）")]),s._v(" "),a("p",[s._v("火焰图往往不是单独使用，经常是和上个版本进行对比，找出性能下降的点，然后将它优化掉，优化不了那就不是bug，就是特性！")]),s._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("./difffolded.pl out1.floded  out2.floded "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" diff.floded\n\n./flamegraph.pl "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("--negate")]),s._v(" diff.floded "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" diff.svg\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("对于生成的差分火焰图，红色表示上升，蓝色表示下降。")]),s._v(" "),a("p",[s._v("但实际发现对于新增的调用栈或删除的调用栈，差分火焰图上并不会显示出红色和蓝色，对于官方说法是让我们正反对比一下，这其实并不好观察。")]),s._v(" "),a("p",[s._v("其实可以自己写个python脚本来实现，思路：直接读取svg文件，获取函数以及它的占用率，对比后生成csv或者excel文件。")]),s._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),a("ul",[a("li",[s._v("https://perf.wiki.kernel.org/index.php/Tutorial#Introduction")]),s._v(" "),a("li",[s._v("https://www.brendangregg.com/perf.html")]),s._v(" "),a("li",[s._v("https://github.com/brendangregg/FlameGraph/blob/master/difffolded.pl")])])])}),[],!1,null,null,null);a.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{518:function(e,t,a){"use strict";a.r(t);var s=a(22),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"git-钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-钩子"}},[e._v("#")]),e._v(" Git 钩子")]),e._v(" "),a("p",[e._v("Git 钩子能够在特定重要动作发生时触发自定义脚本。")]),e._v(" "),a("p",[e._v("钩子都被存储在 Git 目录下的 "),a("code",[e._v("hooks")]),e._v(" 子目录中。 也即绝大部分项目中的 "),a("code",[e._v(".git/hooks")]),e._v(" 。 当你用 "),a("code",[e._v("git init")]),e._v(" 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。 这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。 所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用 —— 你可以用 Ruby 或 Python，或任何你熟悉的语言编写它们。 这些示例的名字都是以 "),a("code",[e._v(".sample")]),e._v(" 结尾，如果你想启用它们，得先移除这个后缀。")]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("applypatch-msg.sample      prepare-commit-msg.sample\ncommit-msg.sample          pre-push.sample\nfsmonitor-watchman.sample  pre-rebase.sample\npost-update.sample         pre-receive.sample\npre-applypatch.sample      update.sample\npre-commit.sample\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("h2",{attrs:{id:"客户端钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端钩子"}},[e._v("#")]),e._v(" 客户端钩子")]),e._v(" "),a("h3",{attrs:{id:"提交工作流钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交工作流钩子"}},[e._v("#")]),e._v(" 提交工作流钩子")]),e._v(" "),a("h4",{attrs:{id:"per-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#per-commit"}},[e._v("#")]),e._v(" per-commit")]),e._v(" "),a("p",[a("code",[e._v("pre-commit")]),e._v("钩子在键入提交信息前运行。它用于检查即将提交的快照，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 如果该钩子以非零值退出，Git 将放弃此次提交，不过你可以用 "),a("code",[e._v("git commit --no-verify")]),e._v(" 来绕过这个环节。 你可以利用该钩子，来检查代码风格是否一致（运行类似 "),a("code",[e._v("lint")]),e._v(" 的程序）、尾随空白字符是否存在（自带的钩子就是这么做的），或新方法的文档是否适当。")]),e._v(" "),a("h4",{attrs:{id:"prepare-commit-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prepare-commit-msg"}},[e._v("#")]),e._v(" prepare-commit-msg")]),e._v(" "),a("p",[a("code",[e._v("prepare-commit-msg")]),e._v(" 钩子在启动提交信息编辑器之前，默认信息被创建之后运行。 它允许你编辑提交者所看到的默认信息。 该钩子接收一些选项：存有当前提交信息的文件的路径、提交类型和修补提交的提交的 SHA-1 校验。 它对一般的提交来说并没有什么用；然而对那些会自动产生默认信息的提交，如提交信息模板、合并提交、压缩提交和修订提交等非常实用。 你可以结合提交模板来使用它，动态地插入信息。")]),e._v(" "),a("h4",{attrs:{id:"commit-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-msg"}},[e._v("#")]),e._v(" commit-msg")]),e._v(" "),a("p",[a("code",[e._v("commit-msg")]),e._v(" 钩子接收一个参数，此参数即上文提到的，存有当前提交信息的临时文件的路径。 如果该钩子脚本以非零值退出，Git 将放弃提交，因此，可以用来在提交通过前验证项目状态或提交信息。 在本章的最后一节，我们将展示如何使用该钩子来核对提交信息是否遵循指定的模板。")]),e._v(" "),a("h4",{attrs:{id:"post-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-commit"}},[e._v("#")]),e._v(" post-commit")]),e._v(" "),a("p",[a("code",[e._v("post-commit")]),e._v(" 钩子在整个提交过程完成后运行。 它不接收任何参数，但你可以很容易地通过运行 "),a("code",[e._v("git log -1 HEAD")]),e._v(" 来获得最后一次的提交信息。 该钩子一般用于通知之类的事情。")]),e._v(" "),a("h3",{attrs:{id:"电子邮件工作流钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#电子邮件工作流钩子"}},[e._v("#")]),e._v(" 电子邮件工作流钩子")]),e._v(" "),a("p",[e._v("它们都是由 "),a("code",[e._v("git am")]),e._v(" 命令调用的，因此如果你没有在你的工作流中用到这个命令，可以跳到下一节。 如果你需要通过电子邮件接收由 "),a("code",[e._v("git format-patch")]),e._v(" 产生的补丁，这些钩子也许用得上。")]),e._v(" "),a("h4",{attrs:{id:"applypatch-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#applypatch-msg"}},[e._v("#")]),e._v(" applypatch-msg")]),e._v(" "),a("p",[e._v("它接收单个参数：包含请求合并信息的临时文件的名字。 如果脚本返回非零值，Git 将放弃该补丁。 你可以用该脚本来确保提交信息符合格式，或直接用脚本修正格式错误。")]),e._v(" "),a("h4",{attrs:{id:"pre-applypatch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-applypatch"}},[e._v("#")]),e._v(" pre-applypatch")]),e._v(" "),a("p",[e._v("它正好运行于应用补丁 "),a("em",[e._v("之后")]),e._v("，产生提交之前，所以你可以用它在提交前检查快照。 你可以用这个脚本运行测试或检查工作区。 如果有什么遗漏，或测试未能通过，脚本会以非零值退出，中断 "),a("code",[e._v("git am")]),e._v(" 的运行，这样补丁就不会被提交。")]),e._v(" "),a("h4",{attrs:{id:"post-applypatch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-applypatch"}},[e._v("#")]),e._v(" post-applypatch")]),e._v(" "),a("p",[a("code",[e._v("post-applypatch")]),e._v(" 运行于提交产生之后，是在 "),a("code",[e._v("git am")]),e._v(" 运行期间最后被调用的钩子。 你可以用它把结果通知给一个小组或所拉取的补丁的作者。 但你没办法用它停止打补丁的过程。")]),e._v(" "),a("h3",{attrs:{id:"其他客户端钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他客户端钩子"}},[e._v("#")]),e._v(" 其他客户端钩子")]),e._v(" "),a("h4",{attrs:{id:"pre-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-rebase"}},[e._v("#")]),e._v(" pre-rebase")]),e._v(" "),a("p",[a("code",[e._v("pre-rebase")]),e._v(" 钩子运行于变基之前，以非零值退出可以中止变基的过程。 你可以使用这个钩子来禁止对已经推送的提交变基。 Git 自带的 "),a("code",[e._v("pre-rebase")]),e._v(" 钩子示例就是这么做的，不过它所做的一些假设可能与你的工作流程不匹配。")]),e._v(" "),a("h4",{attrs:{id:"post-rewrite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-rewrite"}},[e._v("#")]),e._v(" post-rewrite")]),e._v(" "),a("p",[a("code",[e._v("post-rewrite")]),e._v(" 钩子被那些会替换提交记录的命令调用，比如 "),a("code",[e._v("git commit --amend")]),e._v(" 和 "),a("code",[e._v("git rebase")]),e._v("（不过不包括 "),a("code",[e._v("git filter-branch")]),e._v("）。 它唯一的参数是触发重写的命令名，同时从标准输入中接受一系列重写的提交记录。 这个钩子的用途很大程度上跟 "),a("code",[e._v("post-checkout")]),e._v(" 和 "),a("code",[e._v("post-merge")]),e._v(" 差不多。")]),e._v(" "),a("h4",{attrs:{id:"post-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-merge"}},[e._v("#")]),e._v(" post-merge")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("git merge")]),e._v(" 成功运行后，"),a("code",[e._v("post-merge")]),e._v(" 钩子会被调用。 你可以用它恢复 Git 无法跟踪的工作区数据，比如权限数据。 这个钩子也可以用来验证某些在 Git 控制之外的文件是否存在，这样你就能在工作区改变时，把这些文件复制进来。")]),e._v(" "),a("h4",{attrs:{id:"pre-push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-push"}},[e._v("#")]),e._v(" pre-push")]),e._v(" "),a("p",[a("code",[e._v("pre-push")]),e._v(" 钩子会在 "),a("code",[e._v("git push")]),e._v(" 运行期间， 更新了远程引用但尚未传送对象时被调用。 它接受远程分支的名字和位置作为参数，同时从标准输入中读取一系列待更新的引用。 你可以在推送开始之前，用它验证对引用的更新操作（一个非零的退出码将终止推送过程）。")]),e._v(" "),a("h4",{attrs:{id:"pre-auto-gc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-auto-gc"}},[e._v("#")]),e._v(" pre-auto-gc")]),e._v(" "),a("p",[e._v("Git 的一些日常操作在运行时，偶尔会调用 "),a("code",[e._v("git gc --auto")]),e._v(" 进行垃圾回收。 "),a("code",[e._v("pre-auto-gc")]),e._v(" 钩子会在垃圾回收开始之前被调用，可以用它来提醒你现在要回收垃圾了，或者依情形判断是否要中断回收。")]),e._v(" "),a("h2",{attrs:{id:"服务器钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器钩子"}},[e._v("#")]),e._v(" 服务器钩子")]),e._v(" "),a("p",[e._v("这些钩子脚本在推送到服务器之前和之后运行。 推送到服务器前运行的钩子可以在任何时候以非零值退出，拒绝推送并给客户端返回错误消息，还可以依你所想设置足够复杂的推送策略。")]),e._v(" "),a("h4",{attrs:{id:"pre-receive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-receive"}},[e._v("#")]),e._v(" pre-receive")]),e._v(" "),a("p",[e._v("处理来自客户端的推送操作时，最先被调用的脚本是 "),a("code",[e._v("pre-receive")]),e._v("。 它从标准输入获取一系列被推送的引用。如果它以非零值退出，所有的推送内容都不会被接受。 你可以用这个钩子阻止对引用进行非快进（non-fast-forward）的更新，或者对该推送所修改的所有引用和文件进行访问控制。")]),e._v(" "),a("h4",{attrs:{id:"update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[e._v("#")]),e._v(" update")]),e._v(" "),a("p",[a("code",[e._v("update")]),e._v(" 脚本和 "),a("code",[e._v("pre-receive")]),e._v(" 脚本十分类似，不同之处在于它会为每一个准备更新的分支各运行一次。 假如推送者同时向多个分支推送内容，"),a("code",[e._v("pre-receive")]),e._v(" 只运行一次，相比之下 "),a("code",[e._v("update")]),e._v(" 则会为每一个被推送的分支各运行一次。 它不会从标准输入读取内容，而是接受三个参数：引用的名字（分支），推送前的引用指向的内容的 SHA-1 值，以及用户准备推送的内容的 SHA-1 值。 如果 update 脚本以非零值退出，只有相应的那一个引用会被拒绝；其余的依然会被更新。")]),e._v(" "),a("h4",{attrs:{id:"post-receive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post-receive"}},[e._v("#")]),e._v(" post-receive")]),e._v(" "),a("p",[a("code",[e._v("post-receive")]),e._v(" 挂钩在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。 它接受与 "),a("code",[e._v("pre-receive")]),e._v(" 相同的标准输入数据。 它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器， 或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。 该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态， 所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间。")])])}),[],!1,null,null,null);t.default=r.exports}}]);
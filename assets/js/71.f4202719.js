(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{394:function(v,_,e){"use strict";e.r(_);var t=e(4),i=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"内存分区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存分区"}},[v._v("#")]),v._v(" 内存分区")]),v._v(" "),_("blockquote",[_("p",[v._v("可执行文件被加载时，系统会给程序分配内存空间，程序的代码指令和数据在内存空间中都有自己的区域。")])]),v._v(" "),_("p",[v._v("可执行文件的组成：")]),v._v(" "),_("ul",[_("li",[v._v("代码段：\n"),_("ul",[_("li",[_("code",[v._v(".text段")]),v._v("：存放的是可执行文件的可执行指令。")]),v._v(" "),_("li",[_("code",[v._v(".rodata段")]),v._v("：存储常量和字符串常量。")])])]),v._v(" "),_("li",[v._v("数据段：\n"),_("ul",[_("li",[_("code",[v._v(".bss段")]),v._v("：存放"),_("code",[v._v("未初始化")]),v._v("的全局变量和 static 变量。并不占二进制大小，"),_("strong",[v._v("只是为未初始化的全局变量和局部静态变量预留位置")]),v._v("。")]),v._v(" "),_("li",[_("code",[v._v(".data段")]),v._v("："),_("code",[v._v("初始化")]),v._v("的全局变量、static 变量。")])])])]),v._v(" "),_("p",[v._v("当可执行文件被加载到内存后，程序在内存中的五大分区如下：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("代码区")]),v._v("：代码指令存放的区域，只读。")]),v._v(" "),_("li",[_("code",[v._v("常量区")]),v._v("：存放常量的区域。")]),v._v(" "),_("li",[_("code",[v._v("静态（全局）区")]),v._v("：静态变量和全局变量存放的位置。初始化的变量在一块区域，未初始化的在另一个区域。在程序结束时由系统回收。")]),v._v(" "),_("li",[_("code",[v._v("堆区")]),v._v("：动态申请的内存区。在程序运行过程中，由程序员负责管理回收，程序结束时由系统回收。")]),v._v(" "),_("li",[_("code",[v._v("栈区")]),v._v("：系统分配。主要存放临时变量和函数入参，用于维护函数调用的上下文。默认情况下：Linux 默认"),_("code",[v._v("8M")]),v._v("，Window 默认"),_("code",[v._v("1M")]),v._v("。")])]),v._v(" "),_("p",[_("code",[v._v("代码区")]),v._v("，"),_("code",[v._v("常量区")]),v._v("，"),_("code",[v._v("静态（全局）区")]),v._v("在编译期分配好了内存空间并初始化。")]),v._v(" "),_("p",[v._v("Linux 下进程在内存中的经典布局如下：")]),v._v(" "),_("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://cdn.jsdelivr.net/gh/AZMDDY/imgs/img/image-20220109180500587.png",alt:"image-20220109180500587"}}),v._v(" "),_("p",[v._v("程序运行在系统的内存空间里，这些空间一部分给系统内核使用，这部分我们称之为"),_("code",[v._v("内核空间")]),v._v("，剩余部分就是"),_("code",[v._v("用户空间")]),v._v("。")]),v._v(" "),_("div",{staticClass:"language-tip line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("Windows 在默认的情况下会将高地址的 2GB 空间分配给内核（也可以配置 1GB）。\nLinux 默认情况下将高地址的 1GB 空间分配给内核。\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("ul",[_("li",[_("code",[v._v("stack")]),v._v(": 栈用于维护函数调用的上下文，离开了栈，函数调用就无法实现，栈通常在用户空间的最高地址处分配。")]),v._v(" "),_("li",[_("code",[v._v("heap")]),v._v("：堆是用来容纳应用程序动态分配的内存区域，当程序使用 malloc 或者 new 分配内存的时候，得到的内存会来自堆里。堆通常存在栈的下方（低地址方向），在某些时候，堆也可能没有固定统一的存储区域。堆一般比栈大很多，可以有几十至数百兆字节的容量。")]),v._v(" "),_("li",[_("code",[v._v("dynamic libraries")]),v._v("： 这个区域用于映射装载的动态链接库。在 Linux 下，如果可执行文件依赖其它共享库，那么系统就会为它在从 0x40000000 开始的地址分配相应的空间，并将共享库载入该空间。")]),v._v(" "),_("li",[_("code",[v._v("read/write sections")]),v._v("，"),_("code",[v._v("readyonly sections")]),v._v("：可执行文件映像。 存储着可执行文件在内存里的映像，由装载器在装载时将可执行文件的内存读取或映射到这里。")]),v._v(" "),_("li",[_("code",[v._v("reserved")]),v._v("：保留区并不是一个单一的内存区域，而是对内存中受到保护而禁止访问的内存区域的总称：例如大多数操作系统中，极小的地址通常都是不允许访问的，如 NULL，C 语言将无效指针赋值为 0 也是这个考虑。")])])])}),[],!1,null,null,null);_.default=i.exports}}]);